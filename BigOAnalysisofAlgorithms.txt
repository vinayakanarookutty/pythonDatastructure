Let's delve into examples of algorithmic analysis in terms of Big O notation, considering worst-case, best-case, and average-case scenarios. We'll also touch on common time complexities and their relationships to abstract data types.

1. Example: Linear Search
Worst Case: O(n) - You may need to traverse the entire list.
Best Case: O(1) - The target element is found at the beginning of the list.
Average Case: O(n) - On average, you might need to search half of the list.

2. Example: Binary Search (for a sorted array)
Worst Case: O(log n) - The array is repeatedly divided in half.
Best Case: O(1) - The target element is found at the middle of the array.
Average Case: O(log n) - Similar to the worst case, on average, you'll need log(n) comparisons.

3. Example: Bubble Sort
Worst Case: O(n^2) - Quadratic time due to nested loops and swapping elements.
Best Case: O(n) - If the list is already sorted (optimized version).
Average Case: O(n^2) - On average, you need to make n^2/4 comparisons and swaps.

4. Example: Merge Sort
Worst Case: O(n log n) - Consistently divides the array and merges.
Best Case: O(n log n) - Same as the worst case since it always divides the array.
Average Case: O(n log n) - Consistently efficient, even in average cases.

5. Common Time Complexities:
O(1): Constant time, e.g., accessing an element in an array by index.
O(log n): Logarithmic time, common in efficient search and divide-and-conquer algorithms.
O(n): Linear time, e.g., linear search, traversing an array.
O(n log n): Linearithmic time, often seen in efficient sorting algorithms.
O(n^2): Quadratic time, common in inefficient sorting algorithms.
O(2^n): Exponential time, seen in brute-force algorithms.
O(n!): Factorial time, rare and highly inefficient.

6. Abstract Data Types (ADTs):
Stack:
Time Complexity for Push and Pop: O(1)
Queue:
Time Complexity for Enqueue and Dequeue: O(1)
Linked List:
Access/Search/Insert/Delete at Beginning or End: O(1)
Access/Search/Insert/Delete in the Middle: O(n)
Hash Table:
Average Case (with a good hash function): O(1)
Worst Case (with collisions): O(n)

7. Tree-based Data Structures:
Binary Search Tree (BST):
Average Case (balanced): O(log n)
Worst Case (unbalanced): O(n)
Heap:
Insertion and Deletion: O(log n)
Finding the minimum or maximum: O(1)

8. Graph Algorithms:
Depth-First Search (DFS) and Breadth-First Search (BFS):
Time Complexity: O(V + E), where V is the number of vertices and E is the number of edges.
In summary, Big O notation provides a way to express the upper bounds on the growth rate of algorithms, and it's crucial for analyzing their efficiency and scalability in various scenarios. The choice of data structures and algorithms depends on the specific requirements and characteristics of the problem at hand.